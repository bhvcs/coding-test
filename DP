dp 삼각형에 어떤 정보를 담아야 하지? 
어떤 정보를 담아야 뒤로 안돌아가지?
여태까지의 최적의 결과를 구한다

1. N으로 표현

import java.util.*;

class Solution{
    public static int solution(int N, int number){
        Set<Integer> set = new HashSet<>();
        Set<Integer> newSet = new HashSet<>();
        for(int i=1; i<9; i++){
            newSet.add(getFirstNum(i, N));
            Iterator<Integer> it = set.iterator();
            while(it.hasNext()){
                int num = it.next();
                newSet.addAll(new HashSet<>(
                    Arrays.asList(N+num, N-num, N*num,
                                  num+N, num-N, num*N, num/N)));
                if(num != 0) newSet.add(N/num);
                // System.out.println(newSet);
            }
            System.out.println(newSet);
            if(newSet.contains(number)) return i;
            set = new HashSet<>(newSet);
            newSet.clear();
        }
        return -1;
        
    }
    public static int getFirstNum(int j, int N){
        int n = 0;
        for(int i=0; i< j; i++){
            n += N * Math.pow(10, i);
        }
        // System.out.println(n);
        return n;
    }
}
이 코드로 했는데 안됨. 55 * 55를 만들 수 없기 때문임. 55 555 55

다시 풀이했다. 7개의 숫자를 만들때 1 + 6 | 2 + 5 .. 등으로 만들겠다는 생각이 담긴 코드.
import java.util.*;

class Solution{
    public static int solution(int N, int number){
        HashMap<Integer, Set<Integer>> hm = new HashMap<>();
        Set<Integer> newSet = new HashSet<>();
        hm.put(1, new HashSet<>(Set.of(N)));
        if(number == N) return 1;
        for(int i=2; i<9; i++){
            newSet.add(getFirstNum(i, N));
            for(int j=1; j<=i/2; j++){
                Iterator<Integer> it1 = hm.get(j).iterator();
                while(it1.hasNext()){
                    int a1 = it1.next();
                    Iterator<Integer> it2 = hm.get(i-j).iterator();
                    while(it2.hasNext()){
                        int a2 = it2.next();
                        newSet.addAll(new HashSet<>(Arrays.asList(a1+a2, a1-a2, a1*a2, a2+a1, a2-a1, a2*a1)));
                        if(a1 != 0) newSet.add(a2/a1);
                        if(a2 != 0) newSet.add(a1/a2);
                    }
                }
            }
            if(newSet.contains(number)) return i;
            hm.put(i, new HashSet<>(newSet));
            newSet.clear();
        }
        return -1;
        
    }
    public static int getFirstNum(int j, int N){
        int n = 0;
        for(int i=0; i< j; i++){
            n += N * Math.pow(10, i);
        }
        return n;
    }
}
이 코드를 짜면서 배운점은, 이중 반복문을 할 때, iterator 선언을 이중 반복문 밖에다가 선언했었는데, 첫번째 반복문 안쪽에 iterator를 초기화해줘야 된다는 것이다.
밖에다 하면, it2는 다시 처음으로 안돌아가니깐.
그리고 다른 사람의 풀이를 봤는데 iterator로 돌 수 있는 것은 for-each로 돌아가는 것 같다.

2. 정수 삼각형

import java.util.*;

class Solution{
    public static int solution(int[][] triangle){
        for(int i=1; i<triangle.length; i++){
            for(int j=0; j<triangle[i].length; j++){
                int a = 0, b = 0;
                if(j-1 >= 0) a = triangle[i-1][j-1];
                if(j < triangle[i-1].length) b = triangle[i-1][j];
                triangle[i][j] += Math.max(a, b);
            }
        }
        int max = 0;
        for(int t: triangle[triangle.length-1]){
            if(t > max) max = t;
        }
        return max;
    }
}

각 위치에 도달할 떄까지의 최댓값들을 다 계산, 그 중 최댓값을 고른다. 사실 유튜브에서 영상으로 미리 봐서 쉽게 풀이했다.
그리고 int의 최댓값을 구할 떄, stream을 이용한다면
Arrays.stream(triangle[trianlge.length-1]).max.getAsInt() 로 구할 수 있다.

3. 등굣길

class Solution{
    public static int solution(int m, int n, int[][] puddles){
        int[][] map = new int[n+1][m+1];
        for(int[] puddle: puddles){
            map[puddle[1]][puddle[0]] = -1;
        }
        map[1][0] = 1; // 1, 1
        for(int i=1; i<n+1; i++){
            for(int j=1; j<m+1; j++){
                if(map[i][j] == -1){
                    map[i][j] = 0;
                    continue;
                }
                map[i][j] = (map[i][j-1] + map[i-1][j]) % 1000000007;
            }
        }
        return map[n][m];
    }
}
처음에는 return 문에만 모듈러스 연산을 했다. 이 부분이 잘못된게, map을 채우는 과정에서 오버플로우가 발생할 수 있어서, 값을 넣을 때부터 모듈러스 연산을 했어야 했다.
gpt의 도움을 받아서 해당 부분을 고쳤다.

4. 사칙연산

import java.util.*;

class Solution{
    public static int[][] min;
    public static int[][] max;
    public static int solution(String[] arr){
        int len = arr.length / 2 + 1;
        min = new int[len+1][len+1];
        max = new int[len+1][len+1];
        min[1][1] = max[1][1] = Integer.parseInt(arr[0]);
        for(int i=2; i<arr.length; i+=2){
            int j = i/2 + 1;
            min[j][j] = max[j][j] = Integer.parseInt(arr[i-1] + arr[i]);
        }
        for(int i = len; i>=1; i--){
            for(int j=i+1; j <= len; j++){
                calculate(i, j);
            }
        }
        return max[1][len];
    }
    public static void calculate(int x, int y){
        int maxNum, minNum;
        if(max[x][x] >= 0){
            maxNum = max[x][x] + max[x+1][y];
            minNum = min[x][x] + min[x+1][y];
        }else{
            maxNum = Math.max(max[x][x] - min[x+1][y], max[x][x] - min[x+1][y]);
            minNum = Math.min(min[x][x] - max[x+1][y], min[x][x] + min[x+1][y]);
        }
        for(int i = x+1; i <= y-1; i++){
            int tmp = max[x][i] + max[i+1][y];
            maxNum = maxNum < tmp ? tmp : maxNum;
            
            tmp = min[x][i] + min[i+1][y];
            minNum = minNum > tmp ? tmp : minNum;
        }
        max[x][y] = maxNum;
        min[x][y] = minNum;
    }
}
[1, 2] 구간의 max, min이 [1, 3] 구간의 max를 구하는 데에 사용된다는 것을 알아야 한다.
또 [1, 1] 구간의 부호가 음수일 때, 최댓값을 구할 시) max[1][1] - min[2][3] 또한 고려해야된다는 것이 중요하다. 
max[1][1]이 음수이므로 뒤에 붙는 것까지 부호를 역전시킬 수 있기 때문이다.
- 3 + 1 + 8
시작과 끝 구간이 다를 때는, 위처럼 앞에 항이 음수일 때의 특이 케이스를 고려하지 않아도 된다. (-3+1) 이 음수니깐 ( ) - 8을 해야되는거 아니야? 라고 생각할 수 있지만,
어차피 - 3 - (1+8) 처럼 시작 == 끝 부분 정의할 때 포함되어 있을 것이기 때문이다.

너무 어려웠고, 다른 사람의 코드를 보고 약간 이해한 채로 작성한 식이다. 나중에 꼭 다시 보자...!


5. 도둑질

class Solution{
    public static int solution(int[] money){
        int len = money.length;
        int[][] pick = new int[2][money.length];
        pick[0][0] = money[0];
        pick[0][1] = money[0];
        pick[1][0] = 0;
        pick[1][1] = money[1];
        for(int i=2; i<money.length; i++){
            pick[0][i] = Math.max(pick[0][i-2] + money[i], pick[0][i-1]);// 현재꺼를 뽑았을 떄 <> 안뽑았을 때 최댓값
            pick[1][i] = Math.max(pick[1][i-2] + money[i], pick[1][i-1]);
        }// 둘 나눈건 마지막꺼에 대한 처리가 필요하기 때문임
        return Math.max(pick[0][len-2], pick[1][len-1]);
    }
}

결론부터 얘기하면 풀이하지 못해서 남의 코드를 공부해서 거의 그대로 다시 적은 것이다.
현재 순번의 집을 털지 말지 고민한다 했을 때, 경우의 수는 두가지가 있다. 
전의 집을 털고 현재집을 털지 않았을 때의 값 <-> 전의 집을 털지 않고 현재집을 털었을 때의 최댓값 : 전에까지 최댓값을 잘 찾아왔다면 이 로직은 틀릴 수가 없음.
이 방식으로 현재 집을 털지 말지 계속해서 찾아가는 상황이다. 
4단계 dp문제는 전혀 감을 잡지도 못했다. dp 문제는 꾸준히 봐야할 것 같다.

어떤 dp 문제던, 현재꺼를 고를지 말지 선택할 수 있는 확신의 로직을 하나 찾는 것이 핵심이다.
그 과정에서 전에 것을 참조하는 것이 dp이다. dp라해서 전에 것을 어떻게 활용할까에 너무 초점이 맞춰져있었다.
이런 반복적인 과정이 필요한 문제에서는 현재 것을 고를 때, 어떻게하면 고를 수 있을지 찾아내자!!!.

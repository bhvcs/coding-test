1. 같은 숫자는 싫어

import java.util.*;

class Solution{
    public static Integer[] solution(int[] arr){
        int prev = -1;
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0; i<arr.length; i++){
            if(prev != arr[i]){
                queue.offer(arr[i]);
                prev = arr[i];
            }
        }
        return queue.toArray(new Integer[0]);
    }
}

queue를 구현한 구현체로 LinkedList가 있다. offer로 집어넣고, poll로 빼낸다. peek는 뺴내지 않고도 반환해준다.
전에 hash를 풀면서 배웠는데, Collections를 사용할 때, toArray(new Integer[0])을 쓰면 배열로 변환이 간편하다.
다른 문제풀이:
내 코드가 좋아보였음. 근데 Stack<Integer> 을 반환해도 맞게 되더라?

2. 기능개발

import java.util.*;

class Solution{
    public static int[] solution(int[] progresses, int[] speeds){
        ArrayList<Integer> result = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        Arrays.stream(progresses).boxed().forEach(queue::offer);
        int days = 1;
        int seq = 0;
        int nums = 0;
        
        while(!queue.isEmpty()){
            if(queue.peek() + days * speeds[seq] >= 100){
                queue.poll();
                nums++;
                seq++;
            }else{
                if(nums != 0){
                result.add(nums);
                nums = 0;
                }
                days++;
            }   
        }
        if(nums > 0) result.add(nums);
        int size = result.size();
        int[] answer = new int[size];
        for(int i=0; i<size; i++){
            answer[i] = result.get(i).intValue();
        }
        return answer;
    }
}

이번 문제에선 배운 점이 많았음.
Arrays.stream(progresses).boxed().forEach(queue::offer); 배열을 Qeueu으로 바꾸려고 쓴 코드. 비슷한 과정으로 Arrays.stream, collect 메서드를 통해 int[] -> List<Integer>로 바꾸고 Queue로 바꿔도 된다.
queue::offer는 사용하고 싶은 메서드가 있을 때, 해당 메서드가 있는    인스턴스::메서드 로 사용한다. 찾아보다가 .toArray(Integer[]::new) 처럼 ClassName::메서드도 있다. 이때는 static method여야 하는듯.
if(nums > 0) result.add(nums);
이 코드도 중요하다. 마지막에 다 처리되고 끝났는지 확인하는 코드이고 자주 사용되는 로직.

** 마지막까지 처리가 잘 되었는지 확인하는 것이 매우 중요함. 잘 안보이기 때문임. 주의해서 검토!!
ArrayList<Integer> -> int[] 로 바꾸기 위한 코드도 있는데 이건 일부러 이렇게 함. 다른 사람 풀이를 보는 중 이런 풀이가 있어서 해봤다.

다른 사람 풀이:
최대 100일까지 나오니깐 100일짜리 배열을 만들고, 몇 일차를 기준으로 몇 개의 progress가 끝났는지 날짜 배열에 기록한다.
그리고 Arrays.stream(days).filter(i -> i!=0).toArray(); 로 0이 아닌 값들을 stream을 사용해 새로운 array로 만들어준다.
좋은 발상과 방법인 것 같다.

3. 올바른 괄호

import java.util.*;

class Solution{
    public static boolean solution(String s){
        Stack<Character> stack = new Stack<>();
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i) == '('){
                stack.push(s.charAt(i));
            }
            else if(stack.isEmpty()) return false;
            else{
                stack.pop();
            }
        }
        if(stack.isEmpty()) return true;
        return false;
    }
}

이 문제는 코드 자체가 설명인 것 같다.
하나 배운 것은, 처음에 primitive 자료형과 wrapper class 자료형은 자동 변환이 안되는 줄 알았다. 하지만
primitive에서 wrapper class로 auto boxing이 된다는 것을 알았다. 그래서 stack.push(s.charAt(i)) 에서 인자에는 char이지만 정상 동작한다는 것을 알았다.
하지만 int[] 에 Integer를 넣는 것처럼 그 반대는 불가능하다.

다른 사람의 풀이:
굳이 스택을 쓰지 않더라도, ( 와 ) 이 등장한 횟수를 빼면 0이 나오는 것을 잘 이용해서 풀 수도 있다.


4. 프로세스

import java.util.*;

class Solution{
    public static int solution(int[] priorities, int location){
        Queue<Process> queue = new LinkedList<>();
        Arrays.stream(priorities).boxed().map(o -> new Process(o))
            .forEach(queue::offer);
        Queue<Integer> priorities = new PriorityQueue<>(Collections.reverseOrder());
        Arrays.stream(priorities).boexed().forEach(priorityQueue::offer);
        int seq = 0, loc = -1;
        Process proc;
        while(true)[
            proc = queue.poll();
            loc = proc.getLocation();
            if(proc.getPriority() == priorityQueue.peek()){
                seq++;
                if(proc.getLocation() == location){
                    return seq;
                }else{
                    priorityQueue.poll();
                }
            }else{
                queue.offer(proc);
        }
    }
}

class Process{
    static int seq = 0;
    int priority;
    int location;

    public Process(int priority)[
        this.priority = priority;
        this.location = Process.seq++;
    }
    public int getLocation(){
        return this.location;
    }
    public int getPriority(){
        return this.priority;
    }
}

이 문제에서는 프로세스라는 것이, 우선 순위뿐 아니라, 처음 배열로 주어질 때의 인덱스까지 자신의
정보로 사용한다. 그래서 두 개의 정보를 가진 클래스를 만들고, 객체로써 관리하는 것이 좋아보였다.
배운 점은 Solution.java라는 파일이기 때문에 Process 클래스를 public 으로 만들 수 없다.
static 변수를 생성자에서 쓸 수 있고, 클래스 이름으로 접근한다. 
stream을 사용할 떄, map으로 원소를 어떤 객체로 변형하기에 좋으며, forEach는 각 요소에 어떤 행위를
하기가 좋다. 비슷해보이지만 forEach는 stream에서 종료 연산 느낌. 반환값이 void라는 말임.
Queue<Integer> priorityQueue = new PriorityQueue<>(Collections.reverseOrder());
여기서 Collections.reverseOrder() 을 기재하면 내림차순으로 Priority Queue,
아무것도 없다면 default로 오름차순의 Priority Queue임.

5. 다리를 지나는 트럭 (**다시 풀어보고 내 답변을 완전히 실력으로 쌓기 원함)

import java.util.*;

class Solution {
    public static int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        int outTruck = 0;
        int inTruck = 0;
        int bridgeWeights = 0;
        Queue<Integer> bridge = new LinkedList<>();
        Queue<Integer> trucks = new LinkedList<>();
        for(int i=0; i<bridge_length; i++) bridge.offer(0);
        for(int i=0; i<truck_weights.length; i++) trucks.offer(truck_weights[i]);
        while(!trucks.isEmpty()){
            answer++;
            outTruck = bridge.poll();
            bridgeWeights -= outTruck;
            if(bridgeWeights + trucks.peek() <= weight){
                inTruck = trucks.poll();
                bridge.offer(inTruck);
                bridgeWeights += inTruck;
            }
            else bridge.offer(0);
        }
        return answer+bridge_length;
    }
}

내 풀이의 핵심은 건너야 되는 트럭들을 담은 큐, 다리를 나타내는 큐이다.
다리에는 다 0으로 채워넣고, 하나씩 빠질때마다 answer(소요시간)을 1 증가시킨다.
시간이 1초지날 때마다, 다리에서 한 칸을 뺀다. 이 때, 빠진 무게와 다리가 버틸 수 있는 weight을
고려해 다음 truck이 들어갈 수 있는지 확인하고, 있다면 트럭큐에서 하나 투입시키고,
없다면 0을 투입시킨다. 마지막 while 조건에선 트럭큐가 비어있다면, 즉, 마지막 트럭이 다리에
올라가자마자 종료된다. 하여 bridge를 완전히 건널 수 있는 시간만큼 더해주고 끝을 낸다.

어떤 문제나, while을 쓴다면 초기 명령문들이 제일 중요한 것 같다. 이 문제로 따지면
트럭이 나갈 때, 소요 시간이 1 증가할 때, 공통적으로 취하는 행동이 뭔지 정의하는 것이
가장 핵심적인 부분이다.

다른 사람 풀이:
나도 처음에 클래스로 만들어 풀려고 했는데, 그러면 알고리즘 아이디어에 대한 공부가 잘되지 
않는 것 같아서 이렇게 진행했다. 개인적으로 내 풀이가 제일 좋아보인다.


6. 주식가격

import java.util.*;

class Solution{
    public static int[] solution(int[] prices){
        int len = prices.length;
        int[] answers = new int[len];
        Queue<Integer> queue = new LinkedList<>();
        for(int p: prices){
            queue.offer(p);
        }
        Stack<Integer[]> stack = new Stack<>();
        int time = 1;
        Integer[] tmp, arr;
        while(!queue.isEmpty()){
            if(stack.isEmpty() || stack.peek()[0] <= queue.peek()){
                arr = new Integer[2];
                arr[0] = queue.poll();
                arr[1] = time++;
                stack.push(arr);
            }else{
                tmp = stack.pop();
                int idx = tmp[1]-1;
                tmp[1] = time - tmp[1];
                answers[idx] = tmp[1].intValue();
            }
        }
        while(!stack.isEmpty()){
            tmp = stack.pop();
            int idx = tmp[1]-1;
            
            if(tmp[1] == len) tmp[1] = 0;
            else tmp[1] = len - tmp[1];
            answers[idx] = tmp[1];
        }
        return answers;
    }
}

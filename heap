heap

장점:
빠른 삽입 및 삭제( O(lgN) )

단점:
임의의 요소에 개별적인 접근이 힘들고, 삽입이든 삭제든, 계속 정렬을 유지해야 해서, 오버헤드가 발생

PriorityQueue 사용

1. 더 맵게

import java.util.*;

class Solution{
    public static int solution(int[] scoville, int K){
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int s: scoville) minHeap.offer(s);
        int a, answer = 0;
        
        while(minHeap.peek() < K){
            a = minHeap.poll();
            if(minHeap.isEmpty()) return -1;
            a += 2 * minHeap.poll();
            minHeap.offer(a);
            answer++;
        }
        return answer;
    }
}

PriorityQueue를 사용했다.

2. 디스크 컨트롤러

import java.util.*;

class Solution{
    public static int solution(int[][] jobs){
        int time = 0, sum = 0;
        Queue<Integer[]> jobQ = new LinkedList<>();
        PriorityQueue<Integer[]> minHeap = new PriorityQueue<>(
            (o1, o2)->(o1[1]-o2[1]));
        Arrays.sort(jobs, ((o1, o2)->(o1[0]-o2[0])));
        for(int[] job: jobs){
            Integer[] tmp = Arrays.stream(job).boxed().toArray(Integer[]::new);
            jobQ.offer(tmp);
        }
        while(!(jobQ.isEmpty() && minHeap.isEmpty())){
            if((!jobQ.isEmpty()) && (time >= jobQ.peek()[0])){
                Integer[] job = jobQ.poll();
                minHeap.offer(job);
            }
            else if(!minHeap.isEmpty()){
                Integer[] job = minHeap.poll();
                sum += (time - job[0] + job[1]);
                time += job[1];
            }else time++;
        }
        return sum / jobs.length;
    }
}

이 문제를 풀면서 sort 메서드에 좀 더 친숙해졌다. int 를 Integer 배열에 넣는 것은 불가능하니 인지.
while문을 돌때마다 time을 증가시킨게 아닌 특정 상황에서만 time을 증가시키는 것이 코드를 깔끔하게 해준 것 같음.
현재 시간의 실행 대기 목록에서 소요 시간이 최소인 것을 고르기 위해 min Heap을 사용한 것이 풀이의 핵심.

다른 사람의 풀이:
올려놓은 코드에 반영했는데, 구조는 얼추 비슷하지만 마지막 정답을 반환할 때 방식이 좀 달랐다. 나는 처음에, 각 job의 (대기시간 + 소요시간)을 ArrayList에 담고, 마지막에 다 더해 평균을 냈다.
하지만 문제는 합만 구하면 충분했고, ArrayList에 넣는 대신 바로 sum에다 넣으면 불필요한 자원 낭비도 막고, 사건도 단축시킬 수 있었다.

3. 이중우선순위큐

import java.util.*;

class Solution{
    public static int[] solution(String[] operations){
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        String op;
        PriorityQueue<Integer> heap = minHeap, otherHeap = maxHeap;
        boolean isMin = true, isChange = false;
        for(int i=0; i<operations.length; i++){
            op = operations[i];
            if(op.startsWith("I")){
                heap.offer(Integer.parseInt(op.substring(2)));
                continue;
            }
            if(op.startsWith("D -")){
                if(!isMin){
                    isMin = true;
                    isChange = true;
                    minHeap.clear();
                    heap = minHeap;
                    otherHeap = maxHeap;
                }
            }else{ //D
                if(isMin){
                    isMin = false;
                    isChange = true;
                    maxHeap.clear();
                    heap = maxHeap;
                    otherHeap = minHeap;
                }
            }
            if(isChange){
                while(!otherHeap.isEmpty()){
                    heap.offer(otherHeap.poll());
                }
                isChange = false;
            }
            heap.poll(); //공통
        }
        if(heap.isEmpty()) return new int[]{0, 0};
        
        int a = heap.peek();
        otherHeap.clear();
        while(!heap.isEmpty()){
            otherHeap.offer(heap.poll());
        }
        int b = otherHeap.peek();
        if(a > b) return new int[]{a, b};
        else return new int[]{b, a};
    }
}
의미는 간단하지만 코드는 살짝 복잡하다. maxHeap과 minHeap을 구현해서 최댓값을 뽑을 때, 최솟값을 뽑을 때마다 heap을 전환시키도록 구현했다.
힙을 전환시킬 때, O(n)의 clear와 각 요소들을 다 옮기는 O(nlgn) => O(nlgn)이 소요된다. 좋아보이진 않다.
다른 사람의 풀이:
minHeap과 maxHeap을 두고, I 일때는 두 힙에 모두 넣고, 삭제할 때도 한쪽에서는 poll을, 한쪽에서는 remove를 사용한다. 대신 remove도 O(n)의 시간이 걸려서 효율적이지는 못하다.
내 생각에는 delete할 때마다 clear O(n)과 옮기는 작업 O(nlgn) 보다 remove로 O(n)을 하는게 더 나아보인다.

chatgpt한테 내 코드를 개선해달라고 해봤는데, 괜찮은 것 같아서 적는다.
삭제하는 작업이 오래 걸린다. 차라리 map 자료구조를 하나두어서, 어떤 요소가 삭제되었다면 getOrDefault를 사용해서 표시한다. D 명령어가 나와 삭제를 해야할 때, map을 보고 삭제된 녀석인지 확인 후 
maxHeap.poll()하고, map에도 표시를 한다. 그러면 꼭 minHeap에서 삭제를 하지 않아도 된다.
대신 map에 있는 것인지 확인하는 작업 O(1)이 계속 반복될 수 있는데 최악이 O(n)이다. 그래도 어떤 상황에서는 remove보다 더 효율적일 수 있을 것 같아서 기억해놔야겠다.

1. 최소직사각형

  class Solution{
    public static int solution(int[][] sizes){
        int[] card = sizes[0];
        int a, b, c, d;
        
        for(int i=1; i<sizes.length; i++){
            if(sizes[i][0] <= card[0] && sizes[i][1] <= card[1]
              || sizes[i][0] <= card[1] && sizes[i][1] <= card[0]){
                continue;
            }// 그대로 or 돌려서 기존보다 작은 경우
            else{
                a = Math.max(sizes[i][0], card[0]);
                b = Math.max(sizes[i][1], card[1]);
                c = Math.max(sizes[i][0], card[1]);
                d = Math.max(sizes[i][1], card[0]);
                if( a * b >= c * d){
                    card[0] = c;
                    card[1] = d;
                }else{
                    card[0] = a;
                    card[1] = b;
                }
            }
        }
        return card[0] * card[1];
        
    }
}
그래도 불필요한 계산을 안해도 되는 1번 풀이가 시간적으로는 조금 낫다. 하지만 복잡도에서는 큰 차이가 없다는 gpt의 의견이다.



for 문에서 돌면서 그 사이에 비교만 하기 때문에, 비교가 좀 마음에 들지 않더라도 O(n) 에서 끝낼 수 있을 것이라 판단했다.
정리하면서 깨달았지만, if문의 조건 없이, else문 안의 로직만으로도 해당 문제를 풀 수 있다는 것을 알았다.
차이라면 1. 코드의 양. 2. 불필요한 비교
매번 불필요할 수도 있는 비교를 하느냐와 비교만으로 넘어갈 수 있는 애들을 else 문 안의 비교 연산을 계속 해야하느냐이다.
if문 안에서 비교를 총 네번 하고, else문에서는 5번 한다. 근데 항상 5번으로 끝날 수 있다는 장점이다. => 바꿔야겠다.
라고 생각했는데 첫번째 코드가 더 빨랐다. 불필요한 할당을 하지 않아서 그런가?
다른사람 풀이:
length=0, height=0;
length = Math.max(length, Math.max(card[0], card[1]));
height = Math.max(height, Math.min(card[0], card[1]));
이렇게 두면 자연스럽게 긴 쪽이 length, 짧은 쪽이 height에 들어가면서 간단히 해결할 수 있다. 처음 설정(0, 0)을 어떻게 했냐가 중요하다. !!. 어떻게 설정했냐에 따라 되게 간단해 질 수도 있다는 것을 기억하자.

2. 모의고사

import java.util.*;

class Solution{
    public static int[] solution(int[] answers){
        int[] person2 = {1, 3, 4, 5};
        int[] person3 = {3, 1, 2, 4, 5};
        int[] result = new int[]{0, 0, 0};
        for(int i=0; i<answers.length; i++){
            if(answers[i] % 5 == (i+1) % 5) result[0]++;
            if(i % 2 == 0){
                if(answers[i] == 2) result[1]++;
            }else if(answers[i] == person2[i / 2 % 4]) result[1]++;
            if(answers[i] == person3[i / 2 % 5]) result[2]++;
        }
        int max = Arrays.stream(result).max().orElse(-1);
        int[] persons = new int[]{1, 2, 3};
        
        ArrayList<Integer> ans = new ArrayList<Integer>();
        for(int i=0; i<3; i++){
            if(max == result[persons[i]-1]) ans.add(persons[i]);
        }
        return ans.stream().mapToInt(Integer::intValue).toArray();
    }
}
간단하다. 다른 사람의 풀이를 보면, personN의 배열을 길게 해서, 내 코드와 같이 복잡한 비교 없이도 가능하도록 했다.
나도 그렇게 할까하다가, 이렇게 하면 뭔가 이점이 있을까 해서 한거였다. 비교과정과 배열의 길이가 길어지는 것의 차이를 비교해보면, 그냥 배열의 길이를 길게 잡아놓은 풀이가 나은 것 같다.

지금 코드에는 사용되지 않았지만, max를 커스터마이징 하는 방법도 공부하게 됐다.
new Comparator를 정의하고
이를 Arrays.stream(*Array*).max(*Comparator*).orElse(-1); 식으로 하는 것이다. max()애서 멈추면 Optional<Integer>로 끝나니깐 getAsInt를 하던, orElse를 해야된다.

3. 소수 찾기

import java.util.*;

class Solution{
    public static int solution(String numbers){
        String[] tmp = numbers.split("");
        Integer[] nums = Arrays.stream(tmp).map(Integer::valueOf).toArray(Integer[]::new);
        Arrays.sort(nums);
        int x = nums.length;
        int max = nums[0];
        int answer = 0;
        for(int i=1; i<x; i++){
            max += nums[i] * Math.pow(10, i);
        }
        int[] n_list = new int[max+1];
        n_list[0] = -1;
        
        for(int i=3; i<=(int)Math.sqrt(max); i+=2){
            int j = i;
            while(i*j <= max){
                n_list[i*j] = -1;
                j+=2;
            }
        }
        for(int i=2; i<=max; i++){
            if(i%2 == 0 && i!=2) continue;
            if(n_list[i] != -1){
                if(canBeMade(nums, i)){
                    answer++;
                }
                
            }
        }
        return answer;
        
    }
    public static boolean canBeMade(Integer[] nums, int q){
        int k = q;
        ArrayList<Integer> list = new ArrayList<>();
        while(k > 0){
            list.add(k % 10);
            k = k / 10;
        }
        Collections.sort(list);
        int j = 0;
        for(int i=0; i<nums.length; i++){
            if(list.get(j).intValue() == nums[i].intValue()) j++;
            else if(list.get(j).intValue() < nums[i].intValue()) return false;
            if(j == list.size()) return true;
        }
        return false;
    }
}

2를 제외한 짝수는 무조건 소수가 아니다. 그래서 n_list에 굳이 -1을 표시하지 않았다. 그리고 i * j는 합성수의 형식 -> 소수가 아니므로 -1을 표시한다.
근데 i가 Math.sqrt(max) 보다 커지면 굳이 검사할 필요 없다. i * j가 max보다 커지기 때문이다. 처음에는 i * j가 max보다 작을 때만 검사하도록 해서
괜찮을 줄 알았는데, overflow가 나왔다. i * j의 계산 결과가 int 자료형 범위보다 커질 때 발생하는 것이다. Math.sqrt를 사용하면 어차피 max까지 커질일도 없으며,
또한 for 문에서 불필요한 부분까지 돌지 않아도 되서 더 좋다.

다른 사람의 풀이:
처음으로 다른 사람의 풀이 먼저 봤다. 내 코드가 시간 초과가 되는 것을 보고 뭐가 문제인지 몰라 봤던 것이다. 결론적으로는 내부에 무한 루프가 있어서
나왔던 결과이다.
내 코드와의 차이는 numbers 문자열에서 만들어낼 수 있는 숫자들을 모은 배열을 만드는 것이다. 잘 알려져있는 재귀 순열 알고리즘을 응용해서 구현한 풀이었다.
순열 알고리즘을 이렇게 응용할 수도 있구나 하는 생각이 컸다. 많은 것을 배운 풀이었다.

1. 최소직사각형

  class Solution{
    public static int solution(int[][] sizes){
        int[] card = sizes[0];
        int a, b, c, d;
        
        for(int i=1; i<sizes.length; i++){
            if(sizes[i][0] <= card[0] && sizes[i][1] <= card[1]
              || sizes[i][0] <= card[1] && sizes[i][1] <= card[0]){
                continue;
            }// 그대로 or 돌려서 기존보다 작은 경우
            else{
                a = Math.max(sizes[i][0], card[0]);
                b = Math.max(sizes[i][1], card[1]);
                c = Math.max(sizes[i][0], card[1]);
                d = Math.max(sizes[i][1], card[0]);
                if( a * b >= c * d){
                    card[0] = c;
                    card[1] = d;
                }else{
                    card[0] = a;
                    card[1] = b;
                }
            }
        }
        return card[0] * card[1];
        
    }
}
그래도 불필요한 계산을 안해도 되는 1번 풀이가 시간적으로는 조금 낫다. 하지만 복잡도에서는 큰 차이가 없다는 gpt의 의견이다.



for 문에서 돌면서 그 사이에 비교만 하기 때문에, 비교가 좀 마음에 들지 않더라도 O(n) 에서 끝낼 수 있을 것이라 판단했다.
정리하면서 깨달았지만, if문의 조건 없이, else문 안의 로직만으로도 해당 문제를 풀 수 있다는 것을 알았다.
차이라면 1. 코드의 양. 2. 불필요한 비교
매번 불필요할 수도 있는 비교를 하느냐와 비교만으로 넘어갈 수 있는 애들을 else 문 안의 비교 연산을 계속 해야하느냐이다.
if문 안에서 비교를 총 네번 하고, else문에서는 5번 한다. 근데 항상 5번으로 끝날 수 있다는 장점이다. => 바꿔야겠다.
라고 생각했는데 첫번째 코드가 더 빨랐다. 불필요한 할당을 하지 않아서 그런가?
다른사람 풀이:
length=0, height=0;
length = Math.max(length, Math.max(card[0], card[1]));
height = Math.max(height, Math.min(card[0], card[1]));
이렇게 두면 자연스럽게 긴 쪽이 length, 짧은 쪽이 height에 들어가면서 간단히 해결할 수 있다. 처음 설정(0, 0)을 어떻게 했냐가 중요하다. !!. 어떻게 설정했냐에 따라 되게 간단해 질 수도 있다는 것을 기억하자.
